--- mkarchiso-original	2023-11-12 20:44:23.512679284 +0800
+++ mkarchiso	2023-11-12 20:44:01.762796441 +0800
@@ -1,6 +1,7 @@
 #!/usr/bin/env bash
+# mkarchiso patched for arCNiso, mainly for secureboot.
 #
 # SPDX-License-Identifier: GPL-3.0-or-later
 
 set -e -u
 shopt -s extglob
@@ -372,10 +373,22 @@
         exec {ARCHISO_GNUPG_FD}<&-
         unset ARCHISO_GNUPG_FD
     fi
 
     _msg_info "Done! Packages installed successfully."
+
+    # sign the kernel
+    for kernel in "${pacstrap_dir}/boot/vmlinuz-"*; do
+        sbsign --key db.key --cert db.crt --output "$kernel" "$kernel"
+    done
+    # signing grubx64.efi and shell once and for all
+    sbsign --key db.key --cert db.crt --output "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
+    sbsign --key db.key --cert db.crt --output "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi" \
+        "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi"
+    sbsign --key db.key --cert db.crt --output "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi" \
+        "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi"
 }
 
 # Customize installation.
 _make_customize_airootfs() {
     local passwd=()
@@ -692,14 +705,18 @@
     grub-mkstandalone -O i386-efi \
         --modules="${grubmodules[*]}" \
         --locales="en@quot" \
         --themes="" \
         --sbat=/usr/share/grub/sbat.csv \
-        --disable-shim-lock \
         -o "${work_dir}/BOOTIA32.EFI" "boot/grub/grub.cfg=${work_dir}/grub-embed.cfg"
+
+    sbsign --key db.key --cert db.crt --output "${work_dir}/BOOTIA32.EFI" "${work_dir}/BOOTIA32.EFI"
+
     # Add GRUB to the list of files used to calculate the required FAT image size.
     efiboot_files+=("${work_dir}/BOOTIA32.EFI"
+                    "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi"
                     "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi")
 
     if [[ " ${bootmodes[*]} " =~ uefi-x64.systemd-boot.esp ]]; then
         # TODO: Remove this branch.
         _run_once _make_bootmode_uefi-x64.systemd-boot.esp
@@ -709,12 +726,21 @@
         efiboot_imgsize="$(du -bcs -- "${efiboot_files[@]}" 2>/dev/null | awk 'END { print $1 }')"
         # Create a FAT image for the EFI system partition
         _make_efibootimg "$efiboot_imgsize"
     fi
 
-    # Copy GRUB EFI binary to the default/fallback boot path
-    mcopy -i "${efibootimg}" "${work_dir}/BOOTIA32.EFI" ::/EFI/BOOT/BOOTIA32.EFI
+    # Copy shim EFI binary to the default/fallback boot path
+     mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi" ::/EFI/BOOT/BOOTIA32.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi" ::/EFI/BOOT/mmia32.efi
+    # Copy GRUB EFI binary as grubia32.efi chainloaded by shimia32.efi
+    mcopy -i "${efibootimg}" "${work_dir}/BOOTIA32.EFI" ::/EFI/BOOT/grubia32.efi
+
+    if [[ -f db.cer ]] ;then
+        mcopy -o -i "${efibootimg}" db.cer ::/EFI/BOOT/db.cer
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
 
     if [[ -e "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi" ]]; then
@@ -737,12 +763,22 @@
     # manual partitioning and simply copying the ISO 9660 file system contents.
     # This is not related to El Torito booting and no firmware uses these files.
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi" \
+        "${isofs_dir}/EFI/BOOT/BOOTIA32.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi" \
+        "${isofs_dir}/EFI/BOOT/mmia32.efi"
+
     # Copy GRUB EFI binary to the default/fallback boot path
-    install -m 0644 -- "${work_dir}/BOOTIA32.EFI" "${isofs_dir}/EFI/BOOT/BOOTIA32.EFI"
+    install -m 0644 -- "${work_dir}/BOOTIA32.EFI" "${isofs_dir}/EFI/BOOT/grubia32.efi"
+
+    if [[ -f db.cer ]] ;then
+        install -m 0644 db.cer "${isofs_dir}/EFI/BOOT/db.cer"
+    fi
 
     # Copy GRUB configuration files
     _run_once _make_common_bootmode_grub_copy_to_isofs
 
     # edk2-shell based UEFI shell
@@ -769,23 +805,39 @@
     grub-mkstandalone -O x86_64-efi \
         --modules="${grubmodules[*]}" \
         --locales="en@quot" \
         --themes="" \
         --sbat=/usr/share/grub/sbat.csv \
-        --disable-shim-lock \
         -o "${work_dir}/BOOTx64.EFI" "boot/grub/grub.cfg=${work_dir}/grub-embed.cfg"
+
+    sbsign --key db.key --cert db.crt --output "${work_dir}/BOOTx64.EFI" "${work_dir}/BOOTx64.EFI"
+
     # Add GRUB to the list of files used to calculate the required FAT image size.
     efiboot_files+=("${work_dir}/BOOTx64.EFI"
+                    "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi"
                     "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi")
+    if [[ -f db.cer ]] ;then
+        efiboot_files+=(db.cer)
+    fi
 
     efiboot_imgsize="$(du -bcs -- "${efiboot_files[@]}" 2>/dev/null | awk 'END { print $1 }')"
 
     # Create a FAT image for the EFI system partition
     _make_efibootimg "$efiboot_imgsize"
 
-    # Copy GRUB EFI binary to the default/fallback boot path
-    mcopy -i "${efibootimg}" "${work_dir}/BOOTx64.EFI" ::/EFI/BOOT/BOOTx64.EFI
+    # Copy shim EFI binary to the default/fallback boot path
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" ::/EFI/BOOT/mmx64.efi
+    # Copy GRUB EFI binary as grubx64.efi chainloaded by shimx64.efi
+    mcopy -i "${efibootimg}" "${work_dir}/BOOTx64.EFI" ::/EFI/BOOT/grubx64.efi
+
+    if [[ -f db.cer ]] ;then
+        mcopy -i "${efibootimg}" db.cer ::/EFI/BOOT/db.cer
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
 
     if [[ -e "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi" ]]; then
@@ -815,12 +867,22 @@
     # manual partitioning and simply copying the ISO 9660 file system contents.
     # This is not related to El Torito booting and no firmware uses these files.
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" \
+        "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" \
+        "${isofs_dir}/EFI/BOOT/mmx64.efi"
+
     # Copy GRUB EFI binary to the default/fallback boot path
-    install -m 0644 -- "${work_dir}/BOOTx64.EFI" "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${work_dir}/BOOTx64.EFI" "${isofs_dir}/EFI/BOOT/grubx64.efi"
+
+    if [[ -f db.cer ]] ;then
+        install -m 0644 db.cer "${isofs_dir}/EFI/BOOT/db.cer"
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
 
     # edk2-shell based UEFI shell
@@ -842,17 +904,24 @@
     done
     # Calculate the required FAT image size in bytes
     # shellcheck disable=SC2076
     if [[ " ${bootmodes[*]} " =~ ' uefi-x64.systemd-boot.esp ' || " ${bootmodes[*]} " =~ ' uefi-x64.systemd-boot.eltorito ' ]]; then
         efiboot_files+=("${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
+                        "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi"
+                        "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi"
                         "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi")
     fi
     # shellcheck disable=SC2076
     if [[ " ${bootmodes[*]} " =~ ' uefi-ia32.systemd-boot.esp ' || " ${bootmodes[*]} " =~ ' uefi-ia32.systemd-boot.eltorito ' ]]; then
         efiboot_files+=("${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootia32.efi"
+                        "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi"
+                        "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi"
                         "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi")
     fi
+    if [[ -f db.cer ]] ;then
+        efiboot_files+=(db.cer)
+    fi
     efiboot_files+=("${profile}/efiboot/"
                     "${pacstrap_dir}/boot/vmlinuz-"*
                     "${pacstrap_dir}/boot/initramfs-"*".img"
                     "${_available_ucodes[@]}")
     efiboot_imgsize="$(du -bcs -- "${efiboot_files[@]}" 2>/dev/null | awk 'END { print $1 }')"
@@ -893,13 +962,21 @@
 _make_bootmode_uefi-x64.systemd-boot.esp() {
     _msg_info "Setting up systemd-boot for x64 UEFI booting..."
 
     _run_once _make_common_bootmode_systemd-boot
 
-    # Copy systemd-boot EFI binary to the default/fallback boot path
+    # Copy shim EFI binary to the default/fallback boot path
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" ::/EFI/BOOT/mmx64.efi
+    # Copy systemd-boot EFI binary as grubx64.efi chainloaded by shimx64.efi
     mcopy -i "${efibootimg}" \
-        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" ::/EFI/BOOT/grubx64.efi
+    if [[ -f db.cer ]] ;then
+        mcopy -i "${efibootimg}" db.cer ::/EFI/BOOT/db.cer
+    fi
 
     # Copy systemd-boot configuration files
     _run_once _make_common_bootmode_systemd-boot_conf.esp
 
     # shellx64.efi is picked up automatically when on /
@@ -925,13 +1002,23 @@
     # manual partitioning and simply copying the ISO 9660 file system contents.
     # This is not related to El Torito booting and no firmware uses these files.
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
     # Copy systemd-boot EFI binary to the default/fallback boot path
-    install -m 0644 -- "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" \
         "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" \
+        "${isofs_dir}/EFI/BOOT/mmx64.efi"
+
+    # Copy systemd-boot EFI binary as grubx64.efi chainloaded by shimx64.efi
+    install -m 0644 "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+        "${isofs_dir}/EFI/BOOT/grubx64.efi"
+    if [[ -f db.cer ]] ;then
+        install -m 0644 db.cer "${isofs_dir}/EFI/BOOT/db.cer"
+    fi
 
     # Copy systemd-boot configuration files
     _run_once _make_common_bootmode_systemd-boot_conf.isofs
 
     # edk2-shell based UEFI shell
